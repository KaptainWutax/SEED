plugins {
    id 'java-library'
    id 'maven-publish'
    id "idea"
    id "jacoco"
    id 'org.jetbrains.kotlin.jvm' version '1.8.20'
}

group = 'com.seedfinding'
archivesBaseName = project.name

defaultTasks 'clean', 'test', 'install'

repositories {
    mavenCentral()
    maven {
        url "https://maven.seedfinding.com/"
    }
    maven {
        url "https://maven-snapshots.seedfinding.com/"
    }
    maven {
        url "https://maven.latticg.com/"
    }
}

dependencies {
    implementation('com.seedfinding:mc_math:1.171.0') { transitive = false }
    implementation('com.seedfinding:mc_seed:1.171.2') { transitive = false }
    implementation('com.seedfinding:mc_core:1.194.0') { transitive = false }
    implementation('com.seedfinding:mc_noise:1.171.1') { transitive = false }

    implementation('com.seedfinding:mc_biome:1.171.1') { transitive = false }
    implementation('com.seedfinding:mc_terrain:1.171.1') { transitive = false }
    implementation('com.seedfinding:mc_feature:1.171.5') { transitive = false }


    implementation('com.seedfinding:mc_reversal:1.171.1') { transitive = false }
    implementation('com.seedfinding:latticg:1.06') { transitive = false }
}

java {
    withJavadocJar()
    withSourcesJar()
}

compileJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}


test {
    useJUnitPlatform {
        includeEngines("junit-jupiter")
        maxHeapSize = "1G"
    }
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        outputs.upToDateWhen { false }
        showStandardStreams = true
        showExceptions true
        showCauses true
        showStackTraces true
    }
    finalizedBy(jacocoTestReport)
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "$project.name"
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = "$project.name"
                description = 'A library that have collect all Utils libraries used for seed finding/cracking.'
                url = 'http://www.kaptainwutax.seedfinding.com'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'hube12'
                        name = 'Neil'
                    }
                    developer {
                        id = 'Kap'
                        name = 'KaptainWutax'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/kaptainwutax/SEED.git'
                    url = 'https://github.com/kaptainwutax/SEED.git'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://jitpack.io/com/github/kaptainwutax/seed/latest"
            def snapshotsRepoUrl = "https://jitpack.io/com/github/kaptainwutax/seed/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
